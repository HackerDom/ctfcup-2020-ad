from json import loads
from base64 import b64decode
from pwn import remote, context
from Crypto.Util.number import long_to_bytes
from string import ascii_letters, digits
from random import choice

from cube.cube import Cube
from cube.utils import unpad_msg, join_msg
from cipher import cube2long
from utils import generate_cube, generate_info, generate_user, encrypt, decrypt, get_info, get_users_pub_cube, get_users_ciphercubes, list_users, login, register, _exit

context.log_level = 'error'

ADDR = 'localhost', 4551
ALPHA_SET = set((ascii_letters + digits + '=').encode() + bytes(range(16)))
ORDER = 43252003274489856000

def solve(g, c1, c2):
    res = set()
    for x in range(1, 1260):
        answer = _solve(g, x, c1, c2)
        if all(x in ALPHA_SET for x in answer):
            res.add(answer)
    return res

def _solve(g, x, c1, c2):
    m = Cube(c2).multiply(Cube(c1).pow(ORDER - x))
    return long_to_bytes(cube2long(m))

def extend_keys(g, l):
    gs = [g]
    for _ in range(l - 1):
        gs.append(Cube(gs[-1]).move("U x'"))
    return gs


def get_flag(pub_cube, ciphercubes):
    res = []
    for g, (c1, c2) in zip(extend_keys(pub_cube, len(ciphercubes)), ciphercubes):
        res.append(solve(g, c1, c2))

    return unpad_msg(join_msg(x.pop() for x in res)).decode()


def get_users_data():
    user = generate_user()
    cube = generate_cube()
    info = generate_info()

    r = remote(*ADDR)
    register(r, user, cube, info)

    users_list = list_users(r)
    ciphercubes = {}
    for server_user in users_list:
        server_ciphercubes = get_users_ciphercubes(r, server_user)
        if server_ciphercubes is None:
            continue
        server_ciphercubes = [tuple(map(Cube.from_str, x)) for x in loads(b64decode(server_ciphercubes.decode()))]
        server_pub_cube = get_users_pub_cube(r, server_user)
        ciphercubes[server_user] = server_pub_cube, server_ciphercubes

    return ciphercubes

if __name__ == "__main__":
    for user, (pub_cube, ciphercubes) in get_users_data().items():
        try:
            flag = get_flag(pub_cube, ciphercubes)
        except Exception:
            continue
        print(flag)