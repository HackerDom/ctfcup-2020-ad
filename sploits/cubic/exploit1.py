from pwn import remote, context

from cube.cube import Cube
from utils import generate_cube, generate_info, generate_user, get_info, get_users_pub_cube, list_users, login, register, _exit

context.log_level = 'error'

ADDR = 'localhost', 4551


def get_users_priv_cubes():
    user = generate_user()
    cube = generate_cube()
    info = generate_info()

    r = remote(*ADDR)
    register(r, user, cube, info)

    users_list = list_users(r)
    priv_cubes = {}
    base_cube_inversed = Cube().move("U R' U' F'")

    for server_user in users_list:
        if server_user == user:
            continue
        server_user_pub_cube = get_users_pub_cube(r, server_user)
        priv_cubes[server_user] = [Cube(server_user_pub_cube).multiply(base_cube_inversed.pow(i)) for i in range(7)]

    _exit(r)
    r.close()

    return priv_cubes

def get_flag(user, priv_cubes):
    for cube in priv_cubes:
        r = remote(*ADDR)
        try:
            login(r, user, cube)
        except Exception:
            r.close()
            continue
        return get_info(r)
        _exit(r)
        r.close()
    print(user, 'Not found')

if __name__ == "__main__":
    for user, cubes in get_users_priv_cubes().items():
        flag = get_flag(user, cubes)
        if '=' in flag:
            print(flag)